   1               	# 1 "asmfunc.S"
   1               	;---------------------------------------------------------------------------;
   0               	
   2               	; MMC hardware controls and Flash controls      (C)ChaN, 2010
   3               	;---------------------------------------------------------------------------;
   4               	; Hardware dependent macros to be modified
   5               	
   6               	#define	DDR_CS	_SFR_IO_ADDR(DDRG), 5	// MMC CS pin (DDR, PORT)
   7               	#define	PORT_CS	_SFR_IO_ADDR(PORTG), 5
   8               	
   9               	#define	DDR_CK	_SFR_IO_ADDR(DDRB), 1	// MMC SCLK pin (DDR, PORT)
  10               	#define	PORT_CK	_SFR_IO_ADDR(PORTB), 1
  11               	
  12               	#define	DDR_DI	_SFR_IO_ADDR(DDRB), 2	// MMC DI pin (DDR, PORT)
  13               	#define	PORT_DI	_SFR_IO_ADDR(PORTB), 2
  14               	
  15               	#define	PIN_DO	_SFR_IO_ADDR(PINB), 3	// MMC DO pin (PIN, PORT)
  16               	#define	PORT_DO	_SFR_IO_ADDR(PORTB), 3
  17               	
  18               	
  19               	;---------------------------------------------------------------------------;
  22               	.list
  23               	.text
  24               	
  25               	
  26               	;---------------------------------------------------------------------------;
  27               	; Initialize MMC port
  28               	;
  29               	; void init_spi (void);
  30               	
  31               	.global init_spi
  32               	.func init_spi
  33               	init_spi:
  34:asmfunc.S     **** 	sbi	DDR_CS		; CS: output
  35:asmfunc.S     **** 	sbi	DDR_DI		; DI: output
  36:asmfunc.S     **** 	sbi	DDR_CK		; SCLK: output
  37:asmfunc.S     **** 	sbi	PORT_DO		; DO: pull-up
  38:asmfunc.S     **** 	ret
  39               	.endfunc
  40               	
  41               	
  42               	
  43               	;---------------------------------------------------------------------------;
  44               	; Delay 100 microseconds
  45               	;
  46               	; void dly_us (UINT n);
  47               	
  48               	.global dly_100us
  49               	.func dly_100us
  50               	dly_100us:
  51:asmfunc.S     **** 	ldi	r24, lo8(F_CPU / 100000)	/* Loop counter */
  52:asmfunc.S     **** 1:	sbiw	r30, 1		/* 10 clocks per loop */
  53:asmfunc.S     **** 	sbiw	r30, 1
  54:asmfunc.S     **** 	sbiw	r30, 1
  55:asmfunc.S     **** 	nop
  56:asmfunc.S     **** 	dec	r24
  57:asmfunc.S     **** 	brne	1b
  58:asmfunc.S     **** 	ret
  59               	.endfunc
  60               	
  61               	
  62               	
  63               	;---------------------------------------------------------------------------;
  64               	; Select MMC
  65               	;
  66               	; void select (void);
  67               	
  68               	.global select
  69               	.func select
  70               	select:
  71:asmfunc.S     **** 	rcall	deselect
  72:asmfunc.S     **** 	cbi	PORT_CS
  73:asmfunc.S     **** 	rjmp	rcv_spi
  74               	.endfunc
  75               	
  76               	
  77               	
  78               	;---------------------------------------------------------------------------;
  79               	; Deselect MMC
  80               	;
  81               	; void deselect (void);
  82               	
  83               	.global deselect
  84               	.func deselect
  85               	deselect:
  86:asmfunc.S     **** 	sbi	PORT_CS
  87               		; Goto next function
  88               	.endfunc
  89               	
  90               	
  91               	
  92               	;---------------------------------------------------------------------------;
  93               	; Receive a byte
  94               	;
  95               	; BYTE rcv_spi (void);
  96               	
  97               	.global rcv_spi
  98               	.func rcv_spi
  99               	rcv_spi:
 100:asmfunc.S     **** 	ldi	r24, 0xFF	; Send 0xFF to receive data
 101               		; Goto next function
 102               	.endfunc
 103               	
 104               	
 105               	
 106               	;---------------------------------------------------------------------------;
 107               	; Transmit a byte
 108               	;
 109               	; void xmit_spi (BYTE);
 110               	
 111               	.global xmit_spi
 112               	.func xmit_spi
 113               	xmit_spi:
 114:asmfunc.S     **** 	ldi	r25, 8
 115:asmfunc.S     **** 1:	sbrc	r24, 7		; DI = Bit to sent
 116:asmfunc.S     **** 	sbi	PORT_DI		; 
 117:asmfunc.S     **** 	sbrs	r24, 7		; 
 118:asmfunc.S     **** 	cbi	PORT_DI		; /
 119:asmfunc.S     **** 	lsl	r24		; Get DO from MMC
 120:asmfunc.S     **** 	sbic	PIN_DO		; 
 121:asmfunc.S     **** 	inc	r24		; /
 122:asmfunc.S     **** 	sbi	PORT_CK		; A positive pulse to SCLK
 123:asmfunc.S     **** 	cbi	PORT_CK		; /
 124:asmfunc.S     **** 	dec	r25		; Repeat 8 times
 125:asmfunc.S     **** 	brne	1b		; /
 126:asmfunc.S     **** 	ret
 127               	.endfunc
 128               	
 129               	
 130               	
 131               	;---------------------------------------------------------------------------
 132               	; Erase a flash page
 133               	;
 134               	; void flash_erase (DWORD flash_addr);
 135               	
 136               	.global flash_erase
 137               	.func flash_erase
 138               	flash_erase:
 139               	
 140:asmfunc.S     **** 	movw	ZL, r22
 141               	#if FLASHEND >= 0x10000
 142:asmfunc.S     **** 	out	_SFR_IO_ADDR(RAMPZ), r24
 143               	#endif
 144               	
 145               		; Initiate erase operation
 146:asmfunc.S     **** 	ldi	r24, 0b00000011
 147:asmfunc.S     **** 	sts	_SFR_MEM_ADDR(SPMCSR), r24
 148:asmfunc.S     **** 	spm
 149               	
 150               		; Wait for end of erase operation
 151:asmfunc.S     **** 1:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
 152:asmfunc.S     **** 	sbrc	r24, 0
 153:asmfunc.S     **** 	rjmp	1b
 154               	
 155               		; Re-enable read access to the flash
 156:asmfunc.S     **** 	ldi	r24, 0b00010001
 157:asmfunc.S     **** 	sts	_SFR_MEM_ADDR(SPMCSR), r24
 158:asmfunc.S     **** 	spm
 159               	
 160:asmfunc.S     **** 9:	ret
 161               	.endfunc
 162               	
 163               	
 164               	
 165               	;---------------------------------------------------------------------------
 166               	; Write a flash page
 167               	;
 168               	; void flash_write (DWORD flash_addr, const BYTE* data);
 169               	
 170               	.global flash_write
 171               	.func flash_write
 172               	flash_write:
 173:asmfunc.S     **** 	push	r0
 174:asmfunc.S     **** 	push	r1
 175               	
 176               	#if FLASHEND >= 0x10000
 177:asmfunc.S     **** 	out	_SFR_IO_ADDR(RAMPZ), r24
 178               	#endif
 179               	
 180               		; Fill page buffer
 181:asmfunc.S     **** 	movw	ZL, r22
 182:asmfunc.S     **** 	movw	XL, r20
 183:asmfunc.S     **** 	ldi	r25, lo8(SPM_PAGESIZE/2)
 184:asmfunc.S     **** 1:	ld	r0, X+
 185:asmfunc.S     **** 	ld	r1, X+
 186:asmfunc.S     **** 	ldi	r24, 0b00000001
 187:asmfunc.S     **** 	sts	_SFR_MEM_ADDR(SPMCSR), r24
 188:asmfunc.S     **** 	spm
 189:asmfunc.S     **** 	adiw	ZL, 2
 190:asmfunc.S     **** 	dec	r25
 191:asmfunc.S     **** 	brne	1b
 192               	
 193               		; Initiate write operation
 194:asmfunc.S     **** 	movw	ZL, r22
 195:asmfunc.S     **** 	ldi	r24, 0b00000101
 196:asmfunc.S     **** 	sts	_SFR_MEM_ADDR(SPMCSR), r24
 197:asmfunc.S     **** 	spm
 198               	
 199               		; Wait for end of write operation
 200:asmfunc.S     **** 2:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
 201:asmfunc.S     **** 	sbrc	r24, 0
 202:asmfunc.S     **** 	rjmp	2b
 203               	
 204               		; Re-enable read access to the flash
 205:asmfunc.S     **** 	ldi	r24, 0b00010001
 206:asmfunc.S     **** 	sts	_SFR_MEM_ADDR(SPMCSR), r24
 207:asmfunc.S     **** 	spm
 208               	
 209:asmfunc.S     **** 9:	pop	r1
 210:asmfunc.S     **** 	pop	r0
 211:asmfunc.S     **** 	ret
 212               	.endfunc
DEFINED SYMBOLS
           asmfunc.S:33     .text:0000000000000000 init_spi
           asmfunc.S:50     .text:000000000000000a dly_100us
           asmfunc.S:70     .text:000000000000001a select
           asmfunc.S:85     .text:0000000000000020 deselect
           asmfunc.S:99     .text:0000000000000022 rcv_spi
           asmfunc.S:113    .text:0000000000000024 xmit_spi
           asmfunc.S:138    .text:000000000000003e flash_erase
           asmfunc.S:172    .text:000000000000005c flash_write

NO UNDEFINED SYMBOLS
